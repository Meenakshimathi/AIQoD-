Problem Statement: Automated Data Query and Retrieval
 System Using Offline(free & open source) Large Language
 Models With CSV, MongoDB, LlamaIndex, and LangChain


1. CSVData Management:
 ‚óã Youwill be provided with a CSV file containing various columns of data.
 ‚óã Your first task is to write a Python script to load this data into a MongoDB
 collection.
 ‚óã Each row of the CSV should be stored as a separate document in the
 MongoDB database

import pandas as pd
from pymongo import MongoClient

def load_csv_to_mongo(csv_file, db_name="mydb", collection_name="user"):
    client = MongoClient("mongodb://localhost:27017/")
    db = client[db_name]
    collection = db[collection_name]
    
    df = pd.read_csv(csv_file)
    data = df.to_dict(orient='records')
    collection.insert_many(data)
    print(f"‚úÖ Inserted {len(data)} records into {db_name}.{collection_name}")

if __name__ == "__main__":
    load_csv_to_mongo("C:/Users/DELL/Desktop/mangop1.csv")



 2. Dynamic Query Generation using LLM:
 ‚óã The next step involves building a Python-based interface where the user
 can input the name of a CSV column header.
 ‚óã Based on the user's input, you will use an LLM to generate a MongoDB
 query that can retrieve relevant data from the database.
 ‚óã Ensure that the generated query is both syntactically correct and logically
 sound for the given input

import os
from together import Together

# ‚úÖ Set your actual API key here (replace the string below with your real key)
os.environ["TOGETHER_API_KEY"] = "together_xxx123abc456"  # ‚úÖ Use your real Together API key

# ‚úÖ Initialize Together client using the actual API key
client = Together(api_key=os.getenv("TOGETHER_API_KEY"))

# ‚úÖ Query generation using your desired model
def generate_mongo_query(user_input):
    prompt = f"""
You are an expert in MongoDB. Convert the following natural language query into a MongoDB query.
Return ONLY the MongoDB query dictionary (omit 'collection.find' or 'db.collection.find').

Natural language: {user_input}
MongoDB query:
"""
    response = client.chat.completions.create(
        model="meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8",  # ‚úÖ Your chosen model
        messages=[{"role": "user", "content": prompt}],
        max_tokens=256,
        temperature=0.5,
    )

    mongo_query = response.choices[0].message.content.strip()
    log_query(user_input, mongo_query)
    return mongo_query

# ‚úÖ Logging function
def log_query(question, query):
    with open("Queries_generated.txt", "a", encoding="utf-8") as f:
        f.write(f"Q: {question}\nQuery: {query}\n\n")

3. Data Retrieval and Presentation:
 ‚óã Execute the MongoDB query generated by the LLM to fetch the required
 data from the database.
 ‚óã Oncethe data is retrieved, you have two options for presenting it:
‚ñ† Display the Data: Present the data to the user in a
 human-readable format (e.g., a table or printed output).
 ‚ñ† Save the Data: Save the retrieved data back into a new CSV file
 that the user can download or view.Give names to files as per test
 cases.(ex. test_case1.csv etc



import os
import pandas as pd
from pymongo import MongoClient
from together import Together

# === MongoDB Setup ===
client = MongoClient("mongodb://localhost:27017/")
db_name = "mydb"                  # ‚úÖ Matches MongoDB Compass
collection_name = "user"         # ‚úÖ Matches MongoDB Compass
db = client[db_name]
collection = db[collection_name]

# === Together.ai Setup ===
os.environ["TOGETHER_API_KEY"] = "your_real_api_key_here"  # ‚úÖ Replace with your actual API key
together_client = Together(api_key=os.getenv("TOGETHER_API_KEY"))

# === Generate MongoDB Query using Together.ai ===
def generate_mongo_query_llama4(column_input):
    prompt = f"""
You are a MongoDB expert. Convert the following natural language request into a valid PyMongo-style MongoDB query for the collection called 'user'.
Return ONLY the query dictionary inside collection.find() ‚Äî no Python code, no comments.

Request: {column_input}
MongoDB Query:
"""

    response = together_client.chat.completions.create(
        model="meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8",  # ‚úÖ Your model of choice
        messages=[{"role": "user", "content": prompt}],
        temperature=0.3,
        max_tokens=300,
    )

    query_str = response.choices[0].message.content.strip()
    return query_str

# === Execute the MongoDB Query ===
def run_query_on_mongo(query_str):
    try:
        print("\nüìã Evaluating Query String:\n", query_str)
        # Assumes query_str is a raw dictionary string
        query = eval(query_str)
        if not isinstance(query, dict):
            raise ValueError("Generated query is not a valid Python dictionary.")
        results = list(collection.find(query))
        return results
    except Exception as e:
        print("‚ùå Query execution failed:", str(e))
        return []

# === Main User Interface ===
def main():
    print("üîé Welcome to the LLM MongoDB Query Tool")
    user_input = input("üí¨ Enter your query (e.g., 'products with rating > 4.5'): ").strip()

    try:
        query_str = generate_mongo_query_llama4(user_input)
        print("\n‚úÖ Generated MongoDB Query Dictionary:\n", query_str)

        results = run_query_on_mongo(query_str)
        if not results:
            print("\n‚ö†Ô∏è No matching records found or invalid query.")
            return

        df = pd.DataFrame(results).drop(columns=["_id"], errors="ignore")

        choice = input("\nüíæ Do you want to save the results to a CSV file? (yes/no): ").strip().lower()
        if choice == "yes":
            file_name = input("Enter filename (e.g., test_case1.csv): ").strip()
            df.to_csv(file_name, index=False)
            print(f"‚úÖ Saved to {file_name}")
        else:
            print("\nüìä Query Results:\n")
            print(df)

    except Exception as e:
        print(f"\nüö® Error: {e}")
        print("üí° Check the API key, model name, query format, or MongoDB setup.")

if __name__ == "__main__":
    main()




2,,,import os
import pandas as pd
from pymongo import MongoClient
from together import Together

# === CONFIGURATION ===
MONGO_URI = "mongodb://localhost:27017/"
DB_NAME = "mydb"
COLLECTION_NAME = "user"
TOGETHER_API_KEY = "085078471a75adad45e2d56224fce3001bc1e820857735acfe01eccafc9d4b45"  # ‚úÖ Your actual Together.ai API key
TOGETHER_MODEL = "meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8"  # ‚úÖ Correct model name

os.environ["TOGETHER_API_KEY"] = TOGETHER_API_KEY

# === SETUP ===
try:
    client = MongoClient(MONGO_URI)
    db = client[DB_NAME]
    collection = db[COLLECTION_NAME]
except Exception as e:
    print(f"‚ùå MongoDB connection failed: {e}")
    exit(1)

try:
    together_client = Together(api_key=os.getenv("TOGETHER_API_KEY"))
except Exception as e:
    print(f"‚ùå Together client init failed: {e}")
    exit(1)

# === FUNCTION: Generate MongoDB Query ===
def generate_mongo_query(user_question: str) -> str:
    prompt = f"""
You are a MongoDB expert. Convert the following user request into a valid PyMongo-style MongoDB query for the 'user' collection.
Return only the dictionary part of the query (omit collection.find()).

Request: {user_question}
MongoDB Query:
"""
    try:
        response = together_client.chat.completions.create(
            model=TOGETHER_MODEL,
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
            max_tokens=300,
        )
        query_str = response.choices[0].message.content.strip()
        print("\nüìã Raw query from LLM:\n", query_str)
        return query_str
    except Exception as e:
        raise RuntimeError(f"LLM query generation failed: {str(e)}")

# === FUNCTION: Run MongoDB Query ===
def run_query(query_code: str):
    try:
        print("\nüîç Evaluating Query:")
        print(query_code)
        query_dict = eval(query_code)  # Trusted output only
        if not isinstance(query_dict, dict):
            raise ValueError("Generated query is not a valid dictionary.")
        results = list(collection.find(query_dict))
        return results
    except Exception as e:
        raise RuntimeError(f"MongoDB query execution failed: {str(e)}")

# === FUNCTION: Log Query ===
def log_query(user_question: str, query_code: str):
    with open("Queries_generated.txt", "a", encoding="utf-8") as f:
        f.write(f"Q: {user_question}\nQuery: {query_code}\n\n")

# === MAIN FUNCTION ===
def main():
    print("üîé Welcome to the LLM MongoDB Query Tool")
    print("You can ask natural language questions about your product data.\n")

    try:
        user_question = input("üß† Enter your query (e.g., 'Find all products with rating < 4.5'): ").strip()
        query_code = generate_mongo_query(user_question)
        log_query(user_question, query_code)

        results = run_query(query_code)
        if not results:
            print("\n‚ö†Ô∏è No matching documents found.")
            return

        df = pd.DataFrame(results).drop(columns=["_id"], errors="ignore")

        print("\nüéØ Choose output format:")
        print("1. Display in terminal")
        print("2. Save to CSV")

        choice = input("Enter 1 or 2: ").strip()
        if choice == "1":
            print("\nüìä Query Results:\n")
            print(df.to_markdown(index=False))
        elif choice == "2":
            filename = input("Enter filename to save (e.g., test_case1.csv): ").strip()
            df.to_csv(filename, index=False)
            print(f"‚úÖ Results saved to {filename}")
        else:
            print("‚ùå Invalid choice.")

    except Exception as e:
        print(f"\nüö® Error: {str(e)}")
        print("üí° Please check your question, query syntax, or MongoDB setup.")

if __name__ == "__main__":
    main()
3...import pandas as pd
from pymongo import MongoClient
from query_with_llm import generate_mongo_query

# === MongoDB Query Executor ===
def run_query_on_mongo(query_str):
    try:
        client = MongoClient("mongodb://localhost:27017/")
        db = client["mydb"]             # ‚úÖ Updated to match your database
        collection = db["user"]         # ‚úÖ Updated to match your collection

        print("\nüìã Evaluating Query String:\n", query_str)
        query = eval(query_str)         # Assumes it's a dict from LLM
        if not isinstance(query, dict):
            raise ValueError("Query is not a valid dictionary.")

        results = list(collection.find(query))
        return results
    except Exception as e:
        raise RuntimeError(f"Error executing MongoDB query: {e}")

# === Main Function ===
def main():
    print("üîç LLM-Powered MongoDB Query Runner\n")
    user_input = input("üß† Enter your natural language query: ").strip()

    try:
        query = generate_mongo_query(user_input)
        print("\n‚úÖ LLM Generated Query:\n", query)

        results = run_query_on_mongo(query)
        if not results:
            print("‚ö†Ô∏è No matching results found.")
            return

        df = pd.DataFrame(results).drop(columns=["_id"], errors="ignore")

        choice = input("\nüíæ Do you want to save the results to a CSV file? (yes/no): ").strip().lower()
        if choice == "yes":
            filename = input("Enter filename (e.g., test_case1.csv): ").strip()
            df.to_csv(filename, index=False)
            print(f"‚úÖ Results saved to {filename}")
        else:
            print("\nüìä Results:\n")
            print(df.to_markdown(index=False))

    except Exception as e:
        print("\nüö® Error:", str(e))
        print("üí° Check if your query, LLM, or MongoDB connection is valid.")

if __name__ == "__main__":
    main()
